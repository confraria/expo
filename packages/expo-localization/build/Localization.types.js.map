{"version":3,"file":"Localization.types.js","sourceRoot":"","sources":["../src/Localization.types.ts"],"names":[],"mappings":"","sourcesContent":["// @needsAudit\nexport type Localization = {\n  /**\n   * Three-character ISO 4217 currency code. Returns `null` on web.\n   *\n   * @example `'USD'`, `'EUR'`, `'CNY'`, `null`\n   */\n  currency: string | null;\n  /**\n   * Decimal separator used for formatting numbers.\n   *\n   * @example `','`, `'.'`\n   */\n  decimalSeparator: string;\n  /**\n   * Digit grouping separator used when formatting numbers larger than 1000.\n   *\n   * @example `'.'`, `''`, `','`\n   */\n  digitGroupingSeparator: string;\n  /**\n   * A list of all the supported language ISO codes.\n   */\n  isoCurrencyCodes: string[];\n  /**\n   * Boolean value that indicates whether the system uses the metric system.\n   * On Android and web, this is inferred from the current region.\n   */\n  isMetric: boolean;\n  /**\n   * Returns if the system's language is written from Right-to-Left.\n   * This can be used to build features like [bidirectional icons](https://material.io/design/usability/bidirectionality.html).\n   *\n   * Returns `false` in Server Side Rendering (SSR) environments.\n   */\n  isRTL: boolean;\n  /**\n   * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag),\n   * consisting of a two-character language code and optional script, region and variant codes.\n   *\n   * @example `'en'`, `'en-US'`, `'zh-Hans'`, `'zh-Hans-CN'`, `'en-emodeng'`\n   */\n  locale: string;\n  /**\n   * List of all the native languages provided by the user settings.\n   * These are returned in the order that the user defined in the device settings.\n   *\n   * @example `['en', 'en-US', 'zh-Hans', 'zh-Hans-CN', 'en-emodeng']`\n   */\n  locales: string[];\n  /**\n   * The region code for your device that comes from the Region setting under Language & Region on iOS.\n   * This value is always available on iOS, but might return `null` on Android or web.\n   *\n   * @example `'US'`, `'NZ'`, `null`\n   */\n  region: string | null;\n  /**\n   * The current time zone in display format.\n   * On Web time zone is calculated with Intl.DateTimeFormat().resolvedOptions().timeZone. For a\n   * better estimation you could use the moment-timezone package but it will add significant bloat to\n   * your website's bundle size.\n   *\n   * @example `'America/Los_Angeles'`\n   */\n  timezone: string;\n  getPreferredLocales: () => PreferredLocale[];\n  getPreferredCalendars: () => PreferredCalendar[];\n};\n\nexport type PreferredLocale = {\n  /**\n   * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) with a region code. Example: `en-US`, \"es-419\", \"pl-PL\".\n   */\n  languageTag: string;\n  /**\n   * An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) without the region code. Example: `en`, \"es\", \"pl\".\n   */\n  languageCode: string;\n  /**\n   * The region code for your device that comes from the Region setting under Language & Region on iOS, Region settings on android and is parsed from locale on web (can be null on web).\n   */\n  regionCode: string | null;\n  /**\n   * Currency code for the locale. Example: `USD`, \"EUR\", \"PLN\".\n   * Returns `null` on web, use a table lookup based on region instead.\n   */\n  currencyCode: string | null;\n  /**\n   * Currency symbol for the locale. Example: `$`, \"€\", \"zł\".\n   * Returns `null` on web, use a table lookup based on region (if available) instead.\n   */\n  currencySymbol: string | null;\n  /**\n   * Decimal separator used for formatting numbers with fractional parts. Example: `.`, `,`.\n   */\n  decimalSeparator: string | null;\n  /**\n   * Digit grouping separator used for formatting large numbers. Example: `.`, `,`.\n   */\n  digitGroupingSeparator: string | null;\n  /**\n   * Text direction for the locale. One of: `ltr`, `rtl`, but can also be null on older browsers without support for the textInfo API.\n   */\n  textDirection: 'ltr' | 'rtl' | null;\n  /**\n   * The measurement system used in the locale. On iOS is one of `metric`, `us`. On android is one of `metric`, `us`, `uk`.\n   * Returns `null` on web, as user chosen measurement system is not exposed on the web and using locale to determine measurement is unreliable.\n   * Ask for user preferences if possible.\n   */\n  measurementSystem: `metric` | `us` | `uk` | null;\n};\n\nexport type PreferredCalendar = {\n  /**\n   * The calendar identifier.\n   * On web returns one of [Unicode calendar types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar).\n   * Example: `gregory`, `chinese`, `islamic`.\n   *\n   * On android can return one of device's [available calendar types](https://developer.android.com/reference/java/util/Calendar#getAvailableCalendarTypes()).\n   * Should overlap with Unicode calendar types.\n   * Example: `gregory`, `chinese`, `islamic`.\n   *\n   * On iOS can return one of [calendar identifiers](https://developer.apple.com/documentation/foundation/calendar/identifier). Example: `gregorian`, `buddist`.\n   */\n  calendar: string | null;\n  /**\n   * True when current device settings use 24 hour time format.\n   * Can be null on older browsers that don't support the `hourCycle` API.\n   * Is one of: `true`, `false`.\n   */\n  uses24hourClock: boolean | null;\n  /**\n   * The first day of the week. For a Gregorian calendar Sunday is numbered 1, with Monday being number 7.\n   * Can be null on older browsers that don't support the `weekInfo` API.\n   * Example: `1`, `7`, `9` (for non-Gregorian calendars).\n   */\n  firstWeekday: number | null;\n  /**\n   * Time zone for the calendar. Can be null on web.\n   * Example: `America/Los_Angeles`, `Europe/Warsaw`, `GMT+1`.\n   */\n  timeZone: string | null;\n};\n"]}